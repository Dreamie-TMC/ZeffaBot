using System.Text;
using Discord;
using Discord.WebSocket;
using MinishCapRandomizerSeedGeneratorBot.Actions.Tasks;
using MinishCapRandomizerSeedGeneratorBot.Threading.Models;
using RandomizerCore.Controllers;

namespace MinishCapRandomizerSeedGeneratorBot.Actions;

public class AsyncGenerationAction
{
    internal DiscordSocketClient SocketClient { get; set; }
    internal GenerateSeedTask SeedTask { get; set; }
    
    public AsyncGenerationAction(DiscordSocketClient client, GenerateSeedTask seedTask)
    {
        SocketClient = client;
        SeedTask = seedTask;
    }
    
    public async Task GenerateAsyncSeed(SeedGenerationRequest request)
    {
        var responseBuilder = new StringBuilder();

        var shuffler = new ShufflerController();

        request.UploadSpoiler = true;

        var files = await SeedTask.GenerateSeed(shuffler, 10, request, responseBuilder, request.IsAutomatedGeneration);

        if (files.patch == null || files.spoiler == null) return;

        using var patchStream = new MemoryStream(files.patch.Content);
        using var spoilerStream = new MemoryStream(); 
        
        // ReSharper disable once UseAwaitUsing
        using var writer = new StreamWriter(spoilerStream);
        // ReSharper disable MethodHasAsyncOverload
        writer.Write(files.spoiler);
        writer.Flush();
        // ReSharper enable MethodHasAsyncOverload
        spoilerStream.Position = 0;

        var forum = GetForumChannel(request.GuildNumber);

        if (!request.IsAutomatedGeneration)
        {
            var today = DateTime.Today;
            await forum.CreatePostWithFileAsync(
                $"Async #{request.AsyncSeedNumber} {today:MMMM-dd-yyyy}",
                new FileAttachment(patchStream, $"Patch {request.AsyncSeedNumber}.bps"), ThreadArchiveDuration.OneWeek,
                text: $"Async seed {request.AsyncSeedNumber} generated by {request.Command.User.Username}!",
                slowmode: 30);

            try
            {
                await request.Command.User.SendFileAsync(new FileAttachment(spoilerStream,
                        $"Spoiler Log {request.AsyncSeedNumber}.txt", isSpoiler: true),
                    $"Here is the spoiler log for async seed #{request.AsyncSeedNumber}!\nHere is the log:\n{responseBuilder}");
            }
            catch
            {
                // ignored
            }
        }
        else
        {
            var today = DateTime.Today;
            await forum.CreatePostWithFileAsync(
                $"Automated async #{request.AsyncSeedNumber} for the week of {today:MMMM-dd}",
                new FileAttachment(patchStream, $"Automated Async Patch {request.AsyncSeedNumber}.bps"), ThreadArchiveDuration.OneWeek,
                text: $"Automatic Async Seed #{request.AsyncSeedNumber}!",
                slowmode: 30);

            try
            {
                var spoilerChannel = GetAutomaticAsyncSpoilerPostChannel(request.GuildNumber);
                await spoilerChannel.SendFileAsync(new FileAttachment(spoilerStream,
                        $"Spoiler Log for automated async {request.AsyncSeedNumber}.txt", isSpoiler: true),
                    $"Here is the spoiler log for automated async seed #{request.AsyncSeedNumber}!");
            }
            catch
            {
                // ignored
            }
        }
    }

    private SocketForumChannel GetForumChannel(ulong guildId)
    {
        var guild = SocketClient.Guilds.First(guild => guild.Id == guildId);
        return guild.ForumChannels.First(channel =>
            channel.Name.Equals(Constants.AsyncPostChannelName, StringComparison.OrdinalIgnoreCase));
    }

    private SocketTextChannel GetAutomaticAsyncSpoilerPostChannel(ulong guildId)
    {
        var guild = SocketClient.Guilds.First(guild => guild.Id == guildId);
        return guild.TextChannels.First(channel =>
            channel.Name.Equals(Constants.AutomaticAsyncSpoilerChannelName, StringComparison.OrdinalIgnoreCase));
    }
}